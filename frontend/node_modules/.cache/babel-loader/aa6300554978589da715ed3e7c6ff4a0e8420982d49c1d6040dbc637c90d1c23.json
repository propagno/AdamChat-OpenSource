{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport { encodeCharacterReference } from '../util/encode-character-reference.js';\nimport { formatHeadingAsSetext } from '../util/format-heading-as-setext.js';\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1);\n  const tracker = state.createTracker(info);\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext');\n    const subexit = state.enter('phrasing');\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    });\n    subexit();\n    exit();\n    return value + '\\n' + (rank === 1 ? '=' : '-').repeat(\n    // The whole size…\n    value.length - (\n    // Minus the position of the character after the last EOL (or\n    // 0 if there is none)…\n    Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1));\n  }\n  const sequence = '#'.repeat(rank);\n  const exit = state.enter('headingAtx');\n  const subexit = state.enter('phrasing');\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ');\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  });\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);\n  }\n  value = value ? sequence + ' ' + value : sequence;\n  if (state.options.closeAtx) {\n    value += ' ' + sequence;\n  }\n  subexit();\n  exit();\n  return value;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}