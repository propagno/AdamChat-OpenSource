{"version":3,"file":"static/js/411.b8d1d540.chunk.js","mappings":"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","sources":["services/auth.js","pages/LoginReset.js"],"sourcesContent":["// authCleanup.js - Funções para limpar completamente o estado de autenticação\r\n\r\n/**\r\n * Limpa todos os cookies relacionados à autenticação\r\n */\r\nexport const clearAllCookies = () => {\r\n  try {\r\n    const cookies = document.cookie.split(';');\r\n    \r\n    // Log dos cookies para debug\r\n    console.log('Cookies antes da limpeza:', cookies);\r\n    \r\n    for (let cookie of cookies) {\r\n      const [name] = cookie.trim().split('=');\r\n      if (name) {\r\n        // Limpar o cookie em múltiplos domínios e paths para garantir\r\n        const domains = [\r\n          window.location.hostname,\r\n          window.location.hostname.split('.').slice(1).join('.'),\r\n          ''\r\n        ];\r\n        \r\n        const paths = ['/', '/auth', '/realms', ''];\r\n        \r\n        // Tenta remover o cookie de todas as combinações possíveis\r\n        for (const domain of domains) {\r\n          for (const path of paths) {\r\n            const cookieDelete = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}${domain ? `; domain=${domain}` : ''}`;\r\n            document.cookie = cookieDelete;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Verifica se os cookies foram realmente limpos\r\n    console.log('Cookies após limpeza:', document.cookie);\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Erro ao limpar cookies:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Limpa toda a sessão e localStorage relacionados à autenticação\r\n */\r\nexport const clearStorage = () => {\r\n  try {\r\n    // Itens específicos de autenticação\r\n    const authItems = [\r\n      'auth_token', 'refresh_token', 'user_info', 'auth_state',\r\n      'auth_session', 'auth_nonce', 'auth_callback'\r\n    ];\r\n    \r\n    // Limpa SessionStorage específico\r\n    for (const item of authItems) {\r\n      sessionStorage.removeItem(item);\r\n    }\r\n    \r\n    // Limpa localStorage específico\r\n    for (const item of authItems) {\r\n      localStorage.removeItem(item);\r\n    }\r\n    \r\n    // Opcionalmente, limpar todo o sessionStorage\r\n    // sessionStorage.clear();\r\n    \r\n    return true;\r\n  } catch (e) {\r\n    console.error('Erro ao limpar storage:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Limpa todos os dados de autenticação e reinicia o processo\r\n */\r\nexport const completeAuthReset = () => {\r\n  try {\r\n    console.log('Iniciando limpeza completa de autenticação...');\r\n    \r\n    // Limpa cookies\r\n    clearAllCookies();\r\n    \r\n    // Limpa storage\r\n    clearStorage();\r\n    \r\n    // Remove quaisquer parâmetros de URL que possam estar interferindo\r\n    if (window.history && window.history.replaceState) {\r\n      window.history.replaceState({}, document.title, window.location.pathname);\r\n    }\r\n    \r\n    console.log('Limpeza de autenticação concluída com sucesso');\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Erro durante reset de autenticação:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica se o usuário está preso em um loop de redirecionamento\r\n * @returns {boolean} Verdadeiro se detectou um loop\r\n */\r\nexport const detectRedirectLoop = () => {\r\n  // Verifica a presença de \"[object Promise]\" ou outros indicadores de erro na URL\r\n  if (window.location.href.includes('[object') || \r\n      window.location.href.includes('Promise') ||\r\n      window.location.href.includes('undefined')) {\r\n    console.error('Detectado loop de redirecionamento com URL inválida');\r\n    return true;\r\n  }\r\n  \r\n  // Verifica se estamos indo repetidamente para a mesma URL\r\n  const redirectCount = parseInt(sessionStorage.getItem('redirect-count') || '0');\r\n  const lastRedirectUrl = sessionStorage.getItem('last-redirect-url');\r\n  const currentUrl = window.location.href;\r\n  \r\n  if (lastRedirectUrl === currentUrl) {\r\n    sessionStorage.setItem('redirect-count', (redirectCount + 1).toString());\r\n    \r\n    // Se tiver sido redirecionado para a mesma URL mais de 3 vezes, assume que está em loop\r\n    if (redirectCount > 3) {\r\n      console.error('Detectado loop de redirecionamento (mesma URL repetidamente)');\r\n      return true;\r\n    }\r\n  } else {\r\n    // Atualiza a última URL de redirecionamento\r\n    sessionStorage.setItem('last-redirect-url', currentUrl);\r\n    sessionStorage.setItem('redirect-count', '1');\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Resolve o loop de redirecionamento, limpando tudo e voltando para a home\r\n */\r\nexport const breakRedirectLoop = () => {\r\n  console.error('Interrompendo loop de redirecionamento e limpando estado de autenticação');\r\n  \r\n  completeAuthReset();\r\n  \r\n  // Limpa contadores de redirecionamento\r\n  sessionStorage.removeItem('redirect-count');\r\n  sessionStorage.removeItem('last-redirect-url');\r\n  \r\n  // Redireciona para a home, garantindo um estado limpo\r\n  window.location.replace(window.location.origin);\r\n};\r\n\r\n// Verifica se o script está rodando em um ambiente de navegador\r\nif (typeof window !== 'undefined') {\r\n  // Verifica automaticamente por loops de redirecionamento quando o script carrega\r\n  if (detectRedirectLoop()) {\r\n    breakRedirectLoop();\r\n  }\r\n  \r\n  // Adiciona listener de eventos para detectar loops durante a navegação\r\n  window.addEventListener('load', () => {\r\n    if (detectRedirectLoop()) {\r\n      breakRedirectLoop();\r\n    }\r\n  });\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { clearAllCookies, clearStorage } from '../services/auth';\r\n\r\nconst LoginReset = () => {\r\n  const [status, setStatus] = useState('Iniciando limpeza de dados...');\r\n  const [completed, setCompleted] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { logout } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const resetLogin = async () => {\r\n      try {\r\n        setStatus('Limpando cookies...');\r\n        clearAllCookies();\r\n        \r\n        setStatus('Limpando localStorage e sessionStorage...');\r\n        clearStorage();\r\n        \r\n        setStatus('Deslogando do sistema...');\r\n        await logout();\r\n        \r\n        setStatus('Limpeza completa! Redirecionando para a página inicial em 5 segundos...');\r\n        setCompleted(true);\r\n        \r\n        setTimeout(() => {\r\n          navigate('/');\r\n        }, 5000);\r\n      } catch (error) {\r\n        console.error('Erro durante a limpeza:', error);\r\n        setStatus(`Erro durante a limpeza: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    resetLogin();\r\n  }, [navigate, logout]);\r\n\r\n  const handleManualRedirect = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-reset-container\" style={styles.container}>\r\n      <div className=\"login-reset-card\" style={styles.card}>\r\n        <h2 style={styles.title}>Reinicialização de Login</h2>\r\n        <div className=\"status\" style={styles.status}>\r\n          <p>{status}</p>\r\n          {completed && (\r\n            <div className=\"progress\" style={styles.progressBar}>\r\n              <div \r\n                className=\"progress-bar\" \r\n                style={{\r\n                  ...styles.progressBarInner,\r\n                  animation: 'progress 5s linear'\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {completed && (\r\n          <button \r\n            onClick={handleManualRedirect}\r\n            style={styles.button}\r\n          >\r\n            Ir para página inicial agora\r\n          </button>\r\n        )}\r\n        <div style={styles.info}>\r\n          <h3>O que está acontecendo?</h3>\r\n          <p>Esta página está:</p>\r\n          <ul>\r\n            <li>Removendo todos os cookies relacionados à autenticação</li>\r\n            <li>Limpando dados de login armazenados no navegador</li>\r\n            <li>Desconectando você do serviço de autenticação</li>\r\n            <li>Preparando seu navegador para um novo login limpo</li>\r\n          </ul>\r\n          <p><strong>Nota:</strong> Se você continuar enfrentando problemas de login após este processo, considere limpar os cookies do seu navegador manualmente ou entre em contato com o suporte.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minHeight: '100vh',\r\n    backgroundColor: '#f5f5f5',\r\n    padding: '20px'\r\n  },\r\n  card: {\r\n    backgroundColor: 'white',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n    padding: '30px',\r\n    maxWidth: '600px',\r\n    width: '100%'\r\n  },\r\n  title: {\r\n    color: '#333',\r\n    marginBottom: '20px',\r\n    textAlign: 'center'\r\n  },\r\n  status: {\r\n    padding: '15px',\r\n    backgroundColor: '#f8f9fa',\r\n    borderRadius: '4px',\r\n    marginBottom: '20px',\r\n    textAlign: 'center'\r\n  },\r\n  progressBar: {\r\n    height: '5px',\r\n    backgroundColor: '#e9ecef',\r\n    borderRadius: '3px',\r\n    overflow: 'hidden',\r\n    marginTop: '10px'\r\n  },\r\n  progressBarInner: {\r\n    height: '100%',\r\n    backgroundColor: '#007bff',\r\n    width: '0%',\r\n    animation: 'progress 5s linear',\r\n    animationFillMode: 'forwards'\r\n  },\r\n  button: {\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    border: 'none',\r\n    padding: '10px 15px',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n    width: '100%',\r\n    marginBottom: '20px',\r\n    fontWeight: 'bold'\r\n  },\r\n  info: {\r\n    backgroundColor: '#f8f9fa',\r\n    padding: '15px',\r\n    borderRadius: '4px',\r\n    fontSize: '14px'\r\n  }\r\n};\r\n\r\nexport default LoginReset; "],"names":["clearAllCookies","cookies","document","cookie","split","console","log","name","trim","domains","window","location","hostname","slice","join","paths","domain","path","cookieDelete","e","error","clearStorage","authItems","item","sessionStorage","removeItem","localStorage","detectRedirectLoop","href","includes","redirectCount","parseInt","getItem","lastRedirectUrl","currentUrl","setItem","toString","breakRedirectLoop","completeAuthReset","history","replaceState","title","pathname","replace","origin","addEventListener","styles","container","display","justifyContent","alignItems","minHeight","backgroundColor","padding","card","borderRadius","boxShadow","maxWidth","width","color","marginBottom","textAlign","status","progressBar","height","overflow","marginTop","progressBarInner","animation","animationFillMode","button","border","cursor","fontWeight","info","fontSize","LoginReset","setStatus","useState","completed","setCompleted","navigate","useNavigate","logout","useAuth","useEffect","async","setTimeout","message","resetLogin","_jsx","className","style","children","_jsxs","onClick","handleManualRedirect"],"sourceRoot":""}