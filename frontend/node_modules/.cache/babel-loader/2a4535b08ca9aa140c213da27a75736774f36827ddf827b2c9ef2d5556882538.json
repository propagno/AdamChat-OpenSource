{"ast":null,"code":"/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport { longestStreak } from 'longest-streak';\nimport { formatCodeAsIndented } from '../util/format-code-as-indented.js';\nimport { checkFence } from '../util/check-fence.js';\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state);\n  const raw = node.value || '';\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented');\n    const value = state.indentLines(raw, map);\n    exit();\n    return value;\n  }\n  const tracker = state.createTracker(info);\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));\n  const exit = state.enter('codeFenced');\n  let value = tracker.move(sequence);\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`);\n    value += tracker.move(state.safe(node.lang, {\n      before: value,\n      after: ' ',\n      encode: ['`'],\n      ...tracker.current()\n    }));\n    subexit();\n  }\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`);\n    value += tracker.move(' ');\n    value += tracker.move(state.safe(node.meta, {\n      before: value,\n      after: '\\n',\n      encode: ['`'],\n      ...tracker.current()\n    }));\n    subexit();\n  }\n  value += tracker.move('\\n');\n  if (raw) {\n    value += tracker.move(raw + '\\n');\n  }\n  value += tracker.move(sequence);\n  exit();\n  return value;\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}