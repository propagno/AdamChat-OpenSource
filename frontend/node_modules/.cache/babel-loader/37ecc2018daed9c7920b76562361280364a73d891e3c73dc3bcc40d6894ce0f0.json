{"ast":null,"code":"/**\n * @import {Options, State} from './types.js'\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1;\n  /** @type {keyof Options} */\n  let key;\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index]);\n    }\n  }\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'extensions':\n          {\n            // Empty.\n            break;\n          }\n\n        /* c8 ignore next 4 */\n        case 'unsafe':\n          {\n            list(base[key], extension[key]);\n            break;\n          }\n        case 'join':\n          {\n            list(base[key], extension[key]);\n            break;\n          }\n        case 'handlers':\n          {\n            map(base[key], extension[key]);\n            break;\n          }\n        default:\n          {\n            // @ts-expect-error: matches.\n            base.options[key] = extension[key];\n          }\n      }\n    }\n  }\n  return base;\n}\n\n/**\n * @template T\n * @param {Array<T>} left\n * @param {Array<T> | null | undefined} right\n */\nfunction list(left, right) {\n  if (right) {\n    left.push(...right);\n  }\n}\n\n/**\n * @template T\n * @param {Record<string, T>} left\n * @param {Record<string, T> | null | undefined} right\n */\nfunction map(left, right) {\n  if (right) {\n    Object.assign(left, right);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}