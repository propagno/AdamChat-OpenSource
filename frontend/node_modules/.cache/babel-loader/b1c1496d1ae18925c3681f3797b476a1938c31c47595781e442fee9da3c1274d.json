{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dudu-\\\\AdamChat\\\\AdamChat-OpenSource\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\n// src/components/Chat.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport SendIcon from '@mui/icons-material/Send';\nimport { Box, Drawer, List, ListItem, ListItemButton, ListItemText, Toolbar, Typography, TextField, Button, Paper, Divider, Tabs, Tab, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { styled } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 240;\n\n// Dados de exemplo para Agents e GPTs\nconst agents = [{\n  id: 1,\n  name: 'Agent Alpha'\n}, {\n  id: 2,\n  name: 'Agent Beta'\n}, {\n  id: 3,\n  name: 'Agent Gamma'\n}];\nconst gptProviders = [{\n  id: 'chatgpt',\n  name: 'ChatGPT'\n}, {\n  id: 'gemini',\n  name: 'Gemini'\n}, {\n  id: 'outra_api',\n  name: 'Outra API'\n}];\n\n// Estilização para as mensagens\nconst MessageBubble = styled(Paper)(({\n  theme,\n  sender\n}) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: sender === 'user' ? theme.palette.primary.main : theme.palette.grey[300],\n  color: sender === 'user' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  maxWidth: '80%',\n  alignSelf: sender === 'user' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(1),\n  borderRadius: theme.spacing(2)\n}));\n_c = MessageBubble;\nconst Chat = () => {\n  _s();\n  var _gptProviders$find;\n  const [message, setMessage] = useState(\"\");\n  const [history, setHistory] = useState([]);\n  // Estado para definir qual aba está ativa: 0 para Agents, 1 para GPTs\n  const [activeTab, setActiveTab] = useState(0);\n  // Estados para armazenar a seleção de cada grupo\n  const [selectedAgent, setSelectedAgent] = useState(agents[0]);\n  const [selectedGpt, setSelectedGpt] = useState(gptProviders[0].id);\n  const chatEndRef = useRef(null);\n  const user_id = \"usuario_exemplo\"; // Pode ser extraído do token de Keycloak\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  const handleAgentSelect = agent => {\n    setSelectedAgent(agent);\n  };\n  const handleGptSelect = gptId => {\n    setSelectedGpt(gptId);\n  };\n  const sendMessage = async () => {\n    if (message.trim() === \"\") return;\n\n    // Define o provider com base na aba ativa\n    const provider = activeTab === 0 ? selectedAgent.name.toLowerCase() : selectedGpt;\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/chat`, {\n        user_id,\n        message,\n        provider\n      });\n      // O endpoint pode retornar o histórico completo ou apenas a resposta\n      setHistory(response.data.history || [response.data.response]);\n      setMessage(\"\");\n    } catch (error) {\n      console.error(\"Erro ao enviar mensagem:\", error);\n    }\n  };\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [history]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Drawer, {\n      variant: \"permanent\",\n      sx: {\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: {\n          width: drawerWidth,\n          boxSizing: 'border-box'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          noWrap: true,\n          children: \"Op\\xE7\\xF5es\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: activeTab,\n        onChange: handleTabChange,\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Agents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"GPTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), activeTab === 0 ? /*#__PURE__*/_jsxDEV(List, {\n        children: agents.map(agent => /*#__PURE__*/_jsxDEV(ListItem, {\n          disablePadding: true,\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            selected: selectedAgent.id === agent.id,\n            onClick: () => handleAgentSelect(agent),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: agent.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)\n        }, agent.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        children: gptProviders.map(provider => /*#__PURE__*/_jsxDEV(ListItem, {\n          disablePadding: true,\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            selected: selectedGpt === provider.id,\n            onClick: () => handleGptSelect(provider.id),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: provider.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)\n        }, provider.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"main\",\n      sx: {\n        flexGrow: 1,\n        p: 3,\n        ml: `${drawerWidth}px`,\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        sx: {\n          mb: 2\n        },\n        children: [\"Chat com \", activeTab === 0 ? selectedAgent.name : (_gptProviders$find = gptProviders.find(g => g.id === selectedGpt)) === null || _gptProviders$find === void 0 ? void 0 : _gptProviders$find.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1,\n          overflowY: 'auto',\n          mb: 2,\n          p: 2,\n          border: '1px solid #ddd',\n          borderRadius: 2,\n          backgroundColor: '#fafafa',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [history.map((entry, index) => /*#__PURE__*/_jsxDEV(MessageBubble, {\n          sender: entry.sender,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: entry.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          variant: \"outlined\",\n          placeholder: \"Digite sua mensagem...\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              sendMessage();\n              e.preventDefault();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: sendMessage,\n          sx: {\n            ml: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"bow+DHZNbcQNcc+L50Ij06xE3rU=\");\n_c2 = Chat;\nexport default Chat;\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","SendIcon","Box","Drawer","List","ListItem","ListItemButton","ListItemText","Toolbar","Typography","TextField","Button","Paper","Divider","Tabs","Tab","FormControl","InputLabel","Select","MenuItem","styled","jsxDEV","_jsxDEV","drawerWidth","agents","id","name","gptProviders","MessageBubble","theme","sender","padding","spacing","backgroundColor","palette","primary","main","grey","color","contrastText","text","maxWidth","alignSelf","marginBottom","borderRadius","_c","Chat","_s","_gptProviders$find","message","setMessage","history","setHistory","activeTab","setActiveTab","selectedAgent","setSelectedAgent","selectedGpt","setSelectedGpt","chatEndRef","user_id","handleTabChange","event","newValue","handleAgentSelect","agent","handleGptSelect","gptId","sendMessage","trim","provider","toLowerCase","response","post","process","env","REACT_APP_BACKEND_URL","data","error","console","current","scrollIntoView","behavior","sx","display","height","children","variant","width","flexShrink","boxSizing","noWrap","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","centered","label","map","disablePadding","selected","onClick","component","flexGrow","p","ml","flexDirection","mb","find","g","overflowY","border","entry","index","ref","fullWidth","placeholder","e","target","onKeyPress","key","preventDefault","_c2","$RefreshReg$"],"sources":["C:/Users/dudu-/AdamChat/AdamChat-OpenSource/frontend/src/components/Chat.js"],"sourcesContent":["// src/components/Chat.js\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n  Toolbar,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  Divider,\r\n  Tabs,\r\n  Tab,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport { styled } from '@mui/system';\r\n\r\nconst drawerWidth = 240;\r\n\r\n// Dados de exemplo para Agents e GPTs\r\nconst agents = [\r\n  { id: 1, name: 'Agent Alpha' },\r\n  { id: 2, name: 'Agent Beta' },\r\n  { id: 3, name: 'Agent Gamma' },\r\n];\r\n\r\nconst gptProviders = [\r\n  { id: 'chatgpt', name: 'ChatGPT' },\r\n  { id: 'gemini', name: 'Gemini' },\r\n  { id: 'outra_api', name: 'Outra API' },\r\n];\r\n\r\n// Estilização para as mensagens\r\nconst MessageBubble = styled(Paper)(({ theme, sender }) => ({\r\n  padding: theme.spacing(1, 2),\r\n  backgroundColor: sender === 'user' ? theme.palette.primary.main : theme.palette.grey[300],\r\n  color: sender === 'user' ? theme.palette.primary.contrastText : theme.palette.text.primary,\r\n  maxWidth: '80%',\r\n  alignSelf: sender === 'user' ? 'flex-end' : 'flex-start',\r\n  marginBottom: theme.spacing(1),\r\n  borderRadius: theme.spacing(2),\r\n}));\r\n\r\nconst Chat = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [history, setHistory] = useState([]);\r\n  // Estado para definir qual aba está ativa: 0 para Agents, 1 para GPTs\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  // Estados para armazenar a seleção de cada grupo\r\n  const [selectedAgent, setSelectedAgent] = useState(agents[0]);\r\n  const [selectedGpt, setSelectedGpt] = useState(gptProviders[0].id);\r\n  const chatEndRef = useRef(null);\r\n  const user_id = \"usuario_exemplo\"; // Pode ser extraído do token de Keycloak\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleAgentSelect = (agent) => {\r\n    setSelectedAgent(agent);\r\n  };\r\n\r\n  const handleGptSelect = (gptId) => {\r\n    setSelectedGpt(gptId);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (message.trim() === \"\") return;\r\n\r\n    // Define o provider com base na aba ativa\r\n    const provider = activeTab === 0 ? selectedAgent.name.toLowerCase() : selectedGpt;\r\n    \r\n    try {\r\n      const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/chat`, {\r\n        user_id,\r\n        message,\r\n        provider,\r\n      });\r\n      // O endpoint pode retornar o histórico completo ou apenas a resposta\r\n      setHistory(response.data.history || [response.data.response]);\r\n      setMessage(\"\");\r\n    } catch (error) {\r\n      console.error(\"Erro ao enviar mensagem:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatEndRef.current) {\r\n      chatEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', height: '100vh' }}>\r\n      {/* Barra lateral com abas para Agents e GPTs */}\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Opções\r\n          </Typography>\r\n        </Toolbar>\r\n        <Divider />\r\n        <Tabs value={activeTab} onChange={handleTabChange} centered>\r\n          <Tab label=\"Agents\" />\r\n          <Tab label=\"GPTs\" />\r\n        </Tabs>\r\n        <Divider />\r\n        {activeTab === 0 ? (\r\n          <List>\r\n            {agents.map((agent) => (\r\n              <ListItem key={agent.id} disablePadding>\r\n                <ListItemButton\r\n                  selected={selectedAgent.id === agent.id}\r\n                  onClick={() => handleAgentSelect(agent)}\r\n                >\r\n                  <ListItemText primary={agent.name} />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        ) : (\r\n          <List>\r\n            {gptProviders.map((provider) => (\r\n              <ListItem key={provider.id} disablePadding>\r\n                <ListItemButton\r\n                  selected={selectedGpt === provider.id}\r\n                  onClick={() => handleGptSelect(provider.id)}\r\n                >\r\n                  <ListItemText primary={provider.name} />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        )}\r\n      </Drawer>\r\n\r\n      {/* Área principal do chat */}\r\n      <Box \r\n        component=\"main\" \r\n        sx={{ flexGrow: 1, p: 3, ml: `${drawerWidth}px`, display: 'flex', flexDirection: 'column' }}\r\n      >\r\n        <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n          Chat com {activeTab === 0 ? selectedAgent.name : gptProviders.find(g => g.id === selectedGpt)?.name}\r\n        </Typography>\r\n        \r\n        {/* Histórico do Chat */}\r\n        <Box \r\n          sx={{\r\n            flexGrow: 1,\r\n            overflowY: 'auto',\r\n            mb: 2,\r\n            p: 2,\r\n            border: '1px solid #ddd',\r\n            borderRadius: 2,\r\n            backgroundColor: '#fafafa',\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n          }}\r\n        >\r\n          {history.map((entry, index) => (\r\n            <MessageBubble key={index} sender={entry.sender}>\r\n              <Typography variant=\"body1\">{entry.text}</Typography>\r\n            </MessageBubble>\r\n          ))}\r\n          <div ref={chatEndRef} />\r\n        </Box>\r\n        \r\n        {/* Campo de Entrada */}\r\n        <Box sx={{ display: 'flex' }}>\r\n          <TextField\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            placeholder=\"Digite sua mensagem...\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter') {\r\n                sendMessage();\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\" onClick={sendMessage} sx={{ ml: 1 }}>\r\n            <SendIcon />\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}