{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport { checkEmphasis } from '../util/check-emphasis.js';\nimport { encodeCharacterReference } from '../util/encode-character-reference.js';\nimport { encodeInfo } from '../util/encode-info.js';\nemphasis.peek = emphasisPeek;\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state);\n  const exit = state.enter('emphasis');\n  const tracker = state.createTracker(info);\n  const before = tracker.move(marker);\n  let between = tracker.move(state.containerPhrasing(node, {\n    after: marker,\n    before,\n    ...tracker.current()\n  }));\n  const betweenHead = between.charCodeAt(0);\n  const open = encodeInfo(info.before.charCodeAt(info.before.length - 1), betweenHead, marker);\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1);\n  }\n  const betweenTail = between.charCodeAt(between.length - 1);\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);\n  }\n  const after = tracker.move(marker);\n  exit();\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  };\n  return before + between + after;\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}