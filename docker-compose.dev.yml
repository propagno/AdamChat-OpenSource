version: '3.8'
services:
  # -----------------------------
  # Backend (Flask)
  # -----------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-dev
    ports:
      - "5000:5000"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - MONGODB_URI=mongodb://mongodb:27017/adamchat
      - RABBITMQ_URL=amqp://rabbitmq:5672/
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=sua-chave-secreta-dev
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend:/app
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:5000 --workers 2 --reload run:app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # -----------------------------
  # Frontend (React with Hot Reload)
  # -----------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000 || exit 0"]
      interval: 30s
      timeout: 15s
      start_period: 60s
      retries: 5

  # -----------------------------
  # MongoDB
  # -----------------------------
  mongodb:
    image: mongo:latest
    container_name: mongodb-dev
    ports:
      - "27017:27017"
    volumes:
      - mongo-data-dev:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # -----------------------------
  # RabbitMQ
  # -----------------------------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-dev
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data-dev:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # -----------------------------
  # Redis
  # -----------------------------
  redis:
    image: redis:alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data-dev:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  mongo-data-dev:
  rabbitmq-data-dev:
  redis-data-dev: 