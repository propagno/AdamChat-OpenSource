{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport { checkQuote } from '../util/check-quote.js';\nimport { formatLinkAsAutolink } from '../util/format-link-as-autolink.js';\nlink.peek = linkPeek;\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe';\n  const tracker = state.createTracker(info);\n  /** @type {Exit} */\n  let exit;\n  /** @type {Exit} */\n  let subexit;\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack;\n    state.stack = [];\n    exit = state.enter('autolink');\n    let value = tracker.move('<');\n    value += tracker.move(state.containerPhrasing(node, {\n      before: value,\n      after: '>',\n      ...tracker.current()\n    }));\n    value += tracker.move('>');\n    exit();\n    state.stack = stack;\n    return value;\n  }\n  exit = state.enter('link');\n  subexit = state.enter('label');\n  let value = tracker.move('[');\n  value += tracker.move(state.containerPhrasing(node, {\n    before: value,\n    after: '](',\n    ...tracker.current()\n  }));\n  value += tracker.move('](');\n  subexit();\n  if (\n  // If there’s no url but there is a title…\n  !node.url && node.title ||\n  // If there are control characters or whitespace.\n  /[\\0- \\u007F]/.test(node.url)) {\n    subexit = state.enter('destinationLiteral');\n    value += tracker.move('<');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: '>',\n      ...tracker.current()\n    }));\n    value += tracker.move('>');\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: node.title ? ' ' : ')',\n      ...tracker.current()\n    }));\n  }\n  subexit();\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(' ' + quote);\n    value += tracker.move(state.safe(node.title, {\n      before: value,\n      after: quote,\n      ...tracker.current()\n    }));\n    value += tracker.move(quote);\n    subexit();\n  }\n  value += tracker.move(')');\n  exit();\n  return value;\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '[';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}