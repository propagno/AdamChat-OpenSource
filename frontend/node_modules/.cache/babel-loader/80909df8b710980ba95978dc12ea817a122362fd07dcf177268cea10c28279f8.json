{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek;\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType;\n  const exit = state.enter('imageReference');\n  let subexit = state.enter('label');\n  const tracker = state.createTracker(info);\n  let value = tracker.move('![');\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  });\n  value += tracker.move(alt + '][');\n  subexit();\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack;\n  state.stack = [];\n  subexit = state.enter('reference');\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  });\n  subexit();\n  state.stack = stack;\n  exit();\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']');\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1);\n  } else {\n    value += tracker.move(']');\n  }\n  return value;\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}