{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport { checkBullet } from '../util/check-bullet.js';\nimport { checkBulletOther } from '../util/check-bullet-other.js';\nimport { checkBulletOrdered } from '../util/check-bullet-ordered.js';\nimport { checkRule } from '../util/check-rule.js';\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list');\n  const bulletCurrent = state.bulletCurrent;\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);\n  /** @type {string} */\n  const bulletOther = node.ordered ? bullet === '.' ? ')' : '.' : checkBulletOther(state);\n  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined;\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n    // Bullet could be used as a thematic break marker:\n    (bullet === '*' || bullet === '-') &&\n    // Empty first list item:\n    firstListItem && (!firstListItem.children || !firstListItem.children[0]) &&\n    // Directly in two other list items:\n    state.stack[state.stack.length - 1] === 'list' && state.stack[state.stack.length - 2] === 'listItem' && state.stack[state.stack.length - 3] === 'list' && state.stack[state.stack.length - 4] === 'listItem' &&\n    // That are each the first child.\n    state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0) {\n      useDifferentMarker = true;\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1;\n      while (++index < node.children.length) {\n        const item = node.children[index];\n        if (item && item.type === 'listItem' && item.children && item.children[0] && item.children[0].type === 'thematicBreak') {\n          useDifferentMarker = true;\n          break;\n        }\n      }\n    }\n  }\n  if (useDifferentMarker) {\n    bullet = bulletOther;\n  }\n  state.bulletCurrent = bullet;\n  const value = state.containerFlow(node, info);\n  state.bulletLastUsed = bullet;\n  state.bulletCurrent = bulletCurrent;\n  exit();\n  return value;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}