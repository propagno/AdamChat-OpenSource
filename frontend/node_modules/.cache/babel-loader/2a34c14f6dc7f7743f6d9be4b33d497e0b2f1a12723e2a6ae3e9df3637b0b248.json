{"ast":null,"code":"/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport { checkQuote } from '../util/check-quote.js';\nimage.peek = imagePeek;\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe';\n  const exit = state.enter('image');\n  let subexit = state.enter('label');\n  const tracker = state.createTracker(info);\n  let value = tracker.move('![');\n  value += tracker.move(state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  }));\n  value += tracker.move('](');\n  subexit();\n  if (\n  // If there’s no url but there is a title…\n  !node.url && node.title ||\n  // If there are control characters or whitespace.\n  /[\\0- \\u007F]/.test(node.url)) {\n    subexit = state.enter('destinationLiteral');\n    value += tracker.move('<');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: '>',\n      ...tracker.current()\n    }));\n    value += tracker.move('>');\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: node.title ? ' ' : ')',\n      ...tracker.current()\n    }));\n  }\n  subexit();\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(' ' + quote);\n    value += tracker.move(state.safe(node.title, {\n      before: value,\n      after: quote,\n      ...tracker.current()\n    }));\n    value += tracker.move(quote);\n    subexit();\n  }\n  value += tracker.move(')');\n  exit();\n  return value;\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}