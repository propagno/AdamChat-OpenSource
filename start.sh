#!/bin/bash

# Script para iniciar a aplica√ß√£o AdamChat com Docker Compose

echo "üöÄ Iniciando a aplica√ß√£o AdamChat..."

# Verificar se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker antes de continuar."
    exit 1
fi

# Verificar se o Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado. Por favor, instale o Docker Compose antes de continuar."
    exit 1
fi

# Verificar se o Docker est√° rodando
if ! docker info &> /dev/null; then
    echo "‚ùå O servi√ßo Docker n√£o est√° em execu√ß√£o. Inicie o Docker e tente novamente."
    exit 1
fi

# Criar diret√≥rio keycloak se n√£o existir
if [ ! -d "keycloak" ]; then
    echo "üìÅ Criando diret√≥rio keycloak..."
    mkdir -p keycloak
fi

# Verificar se o arquivo realm-export.json existe
if [ ! -f "keycloak/realm-export.json" ]; then
    echo "‚ö†Ô∏è Arquivo keycloak/realm-export.json n√£o encontrado."
    echo "üìù Certifique-se de que este arquivo existe antes de continuar."
    exit 1
fi

# Verificar arquivos .env do frontend e backend
if [ ! -f "frontend/.env" ] && [ -f "frontend/.env.example" ]; then
    echo "üìù Criando arquivo .env do frontend a partir do .env.example..."
    cp frontend/.env.example frontend/.env
    echo "‚úÖ Arquivo .env do frontend criado com sucesso!"
fi

if [ ! -f "backend/.env" ] && [ -f "backend/.env.example" ]; then
    echo "üìù Criando arquivo .env do backend a partir do .env.example..."
    cp backend/.env.example backend/.env
    echo "‚úÖ Arquivo .env do backend criado com sucesso!"
fi

# Parar containers existentes se estiverem rodando
echo "üõë Parando containers existentes se estiverem rodando..."
docker-compose down

# Iniciar os servi√ßos com Docker Compose
echo "üê≥ Iniciando servi√ßos com Docker Compose..."
docker-compose up -d

# Verificar se a inicializa√ß√£o foi bem-sucedida
if [ $? -eq 0 ]; then
    echo "‚úÖ Servi√ßos iniciados com sucesso!"
    
    # Aguardar que os servi√ßos estejam prontos
    echo "‚è≥ Aguardando que os servi√ßos inicializem completamente..."
    sleep 10
    
    # Verificar status dos servi√ßos principais
    echo -e "\nüìä Status dos servi√ßos principais:"
    
    # Verificar MongoDB
    if docker ps | grep -q mongodb; then
        echo "‚úÖ MongoDB: em execu√ß√£o"
    else
        echo "‚ùå MongoDB: n√£o est√° rodando"
    fi
    
    # Verificar Keycloak
    if docker ps | grep -q keycloak; then
        echo "‚úÖ Keycloak: em execu√ß√£o"
    else
        echo "‚ùå Keycloak: n√£o est√° rodando"
    fi
    
    # Verificar Backend
    if docker ps | grep -q backend; then
        echo "‚úÖ Backend: em execu√ß√£o"
    else
        echo "‚ùå Backend: n√£o est√° rodando"
    fi
    
    # Verificar Frontend
    if docker ps | grep -q frontend; then
        echo "‚úÖ Frontend: em execu√ß√£o"
    else
        echo "‚ùå Frontend: n√£o est√° rodando"
    fi
    
    echo -e "\nüìå A aplica√ß√£o est√° dispon√≠vel em:"
    echo "   - Frontend: http://localhost:3000"
    echo "   - Backend API: http://localhost:5000/api"
    echo "   - Keycloak: http://localhost:8180/auth"
    echo "   - MongoDB: mongodb://localhost:27017"
    echo "   - Grafana: http://localhost:3001 (usu√°rio: admin, senha: admin)"
    echo -e "\n‚ö†Ô∏è Primeira inicializa√ß√£o: Aguarde alguns minutos para que todos os servi√ßos estejam totalmente dispon√≠veis."
    echo -e "\nüìå Comandos √∫teis:"
    echo "   - Para visualizar os logs: docker-compose logs -f"
    echo "   - Para visualizar os logs de um servi√ßo espec√≠fico: docker-compose logs -f [servi√ßo]"
    echo "   - Para parar a aplica√ß√£o: docker-compose down"
    echo "   - Para parar a aplica√ß√£o e remover volumes: docker-compose down -v (‚ö†Ô∏è CUIDADO: isso apagar√° os dados)"
else
    echo "‚ùå Erro ao iniciar servi√ßos."
    echo "üìä Verificando logs para identificar problemas..."
    docker-compose logs
    exit 1
fi 